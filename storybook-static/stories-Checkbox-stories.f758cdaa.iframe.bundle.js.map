{"version":3,"file":"stories-Checkbox-stories.f758cdaa.iframe.bundle.js","mappings":";;;;;;AA4QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;ACzPA;AACA;;;;AAIA","sources":["webpack://storybook-vk/./node_modules/@carbon/web-components/es/components/checkbox/checkbox.js","webpack://storybook-vk/./node_modules/@carbon/web-components/es/components/checkbox/checkbox-skeleton.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _decorate from \"@babel/runtime/helpers/esm/decorate\";\nlet _ = t => t,\n  _t;\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { LitElement, html } from 'lit';\nimport { property, query } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings';\nimport FocusMixin from '../../globals/mixins/focus';\nimport FormMixin from '../../globals/mixins/form';\nimport styles from \"././checkbox.css.js\";\nimport { carbonElement as customElement } from '../../globals/decorators/carbon-element';\n\n/**\n * Check box.\n *\n * @element cds-checkbox\n * @fires cds-checkbox-changed - The custom event fired after this changebox changes its checked state.\n * @csspart input The checkbox.\n * @csspart label The label.\n */\nlet CDSCheckbox = _decorate([customElement(`${prefix}-checkbox`)], function (_initialize, _FocusMixin) {\n  class CDSCheckbox extends _FocusMixin {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: CDSCheckbox,\n    d: [{\n      kind: \"field\",\n      decorators: [query('input')],\n      key: \"_checkboxNode\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"_handleChange\",\n      value:\n      /**\n       * Handles `click` event on the `<input>` in the shadow DOM.\n       */\n      function _handleChange() {\n        const {\n          checked,\n          indeterminate\n        } = this._checkboxNode;\n        this.checked = checked;\n        this.indeterminate = indeterminate;\n        const {\n          eventChange\n        } = this.constructor;\n        this.dispatchEvent(new CustomEvent(eventChange, {\n          bubbles: true,\n          composed: true,\n          detail: {\n            checked,\n            indeterminate\n          }\n        }));\n      }\n\n      /**\n       * Prevent checkbox state from updating when readonly\n       */\n    }, {\n      kind: \"method\",\n      key: \"_handleClick\",\n      value: function _handleClick(event) {\n        if (this.readonly) {\n          event.preventDefault();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleFormdata\",\n      value: function _handleFormdata(event) {\n        const {\n          formData\n        } = event; // TODO: Wait for `FormDataEvent` being available in `lib.dom.d.ts`\n        const {\n          checked,\n          disabled,\n          name,\n          value = 'on'\n        } = this;\n        if (!disabled && checked) {\n          formData.append(name, value);\n        }\n      }\n\n      /**\n       * Specify whether the underlying input should be checked\n       */\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true,\n        attribute: 'checked'\n      })],\n      key: \"checked\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true,\n        attribute: 'data-table'\n      })],\n      key: \"dataTable\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"disabled\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true,\n        attribute: 'hide-checkbox'\n      })],\n      key: \"hideCheckbox\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true,\n        attribute: 'hide-label'\n      })],\n      key: \"hideLabel\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"indeterminate\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: 'label-text'\n      })],\n      key: \"labelText\",\n      value() {\n        return '';\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"name\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"readonly\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: 'title'\n      })],\n      key: \"title\",\n      value() {\n        return '';\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"value\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value:\n      /**\n       * Specify if checkbox is being used in a data table\n       */\n      /**\n       * Specify whether the Checkbox should be disabled\n       */\n      /**\n       * Specify whether the checkbox should be present in the DOM,\n       * but invisible and uninteractable. Used for data-table purposes.\n       */\n      /**\n       * Specify whether the label should be hidden, or not\n       */\n      /**\n       * Specify whether the Checkbox is in an indeterminate state\n       */\n      /**\n       * Provide a label to provide a description of the Checkbox input that you are\n       * exposing to the user\n       */\n      /**\n       * The form name.\n       */\n      /**\n       * Specify whether the Checkbox is read-only\n       */\n      /**\n       * Specify a title for the node for the Checkbox\n       */\n      /**\n       * The value.\n       */\n      function render() {\n        const {\n          checked,\n          disabled,\n          hideLabel,\n          indeterminate,\n          labelText,\n          name,\n          readonly,\n          title,\n          value,\n          _handleChange: handleChange,\n          _handleClick: handleClick\n        } = this;\n        const labelClasses = classMap({\n          [`${prefix}--checkbox-label`]: true\n        });\n        const labelTextClasses = classMap({\n          [`${prefix}--checkbox-label-text`]: true,\n          [`${prefix}--visually-hidden`]: hideLabel\n        });\n        return html(_t || (_t = _`\n      <input\n        id=\"checkbox\"\n        type=\"checkbox\"\n        part=\"input\"\n        class=\"${0}\"\n        aria-checked=\"${0}\"\n        aria-readonly=\"${0}\"\n        .checked=\"${0}\"\n        ?disabled=\"${0}\"\n        .indeterminate=\"${0}\"\n        name=\"${0}\"\n        value=\"${0}\"\n        @change=\"${0}\"\n        @click=\"${0}\" />\n      <label\n        for=\"checkbox\"\n        part=\"label\"\n        class=\"${0}\"\n        title=\"${0}\">\n        <span class=\"${0}\"><slot>${0}</slot></span>\n      </label>\n    `), `${prefix}--checkbox`, indeterminate ? 'mixed' : String(Boolean(checked)), String(Boolean(readonly)), checked, disabled, indeterminate, ifDefined(name), ifDefined(value), handleChange, handleClick, labelClasses, ifDefined(title), labelTextClasses, labelText);\n      }\n\n      /**\n       * The name of the custom event fired after this changebox changes its checked state.\n       */\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"eventChange\",\n      value: function eventChange() {\n        return `${prefix}-checkbox-changed`;\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"shadowRootOptions\",\n      value() {\n        return _objectSpread(_objectSpread({}, LitElement.shadowRootOptions), {}, {\n          delegatesFocus: true\n        });\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return styles;\n      }\n    }]\n  };\n}, FocusMixin(FormMixin(LitElement)));\nexport default CDSCheckbox;\n//# sourceMappingURL=checkbox.js.map\n","import _decorate from \"@babel/runtime/helpers/esm/decorate\";\nlet _ = t => t,\n  _t;\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings';\nimport styles from \"././checkbox.css.js\";\n\n/**\n * Skeleton of number input.\n */ /**\n     * Skeleton of number input.\n     */\nlet CDSCheckboxSkeleton = _decorate([customElement(`${prefix}-checkbox-skeleton`)], function (_initialize, _LitElement) {\n  class CDSCheckboxSkeleton extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: CDSCheckboxSkeleton,\n    d: [{\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html(_t || (_t = _`\n      <label class=\"${0}--checkbox-label\" for=\"checkbox\" part=\"label\">\n        <span class=\"${0}--checkbox-label-text ${0}--skeleton\"\n          ><slot></slot\n        ></span>\n      </label>\n    `), prefix, prefix, prefix);\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return styles;\n      }\n    }]\n  };\n}, LitElement);\nexport default CDSCheckboxSkeleton;\n//# sourceMappingURL=checkbox-skeleton.js.map\n"],"names":[],"sourceRoot":""}