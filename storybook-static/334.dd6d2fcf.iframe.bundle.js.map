{"version":3,"file":"334.dd6d2fcf.iframe.bundle.js","mappings":";;AAgcA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAaA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AC1bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA","sources":["webpack://storybook-vk/./node_modules/@carbon/web-components/es/components/button/button.js","webpack://storybook-vk/./node_modules/@carbon/web-components/es/components/button/button-skeleton.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _decorate from \"@babel/runtime/helpers/esm/decorate\";\nlet _ = t => t,\n  _t,\n  _t2,\n  _t3,\n  _t4,\n  _t5;\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings';\nimport FocusMixin from '../../globals/mixins/focus';\nimport { BUTTON_KIND, BUTTON_TYPE, BUTTON_SIZE, BUTTON_TOOLTIP_ALIGNMENT, BUTTON_TOOLTIP_POSITION } from './defs';\nimport styles from \"././button.css.js\";\nimport HostListener from '../../globals/decorators/host-listener';\nimport HostListenerMixin from '../../globals/mixins/host-listener';\nimport { carbonElement as customElement } from '../../globals/decorators/carbon-element';\nexport { BUTTON_KIND, BUTTON_TYPE, BUTTON_SIZE, BUTTON_TOOLTIP_ALIGNMENT, BUTTON_TOOLTIP_POSITION };\n\n/**\n * Button.\n *\n * @element cds-button\n * @csspart button The button.\n */\nlet CDSButton = _decorate([customElement(`${prefix}-button`)], function (_initialize, _HostListenerMixin) {\n  class CDSButton extends _HostListenerMixin {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: CDSButton,\n    d: [{\n      kind: \"field\",\n      key: \"_hasIcon\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleSlotChange\",\n      value:\n      /**\n       * `true` if there is an icon.\n       */\n\n      /**\n       * Handles `slotchange` event.\n       */\n      function _handleSlotChange({\n        target\n      }) {\n        const {\n          name\n        } = target;\n        const hasContent = target.assignedNodes().some(node => node.nodeType !== Node.TEXT_NODE || node.textContent.trim());\n        this[name === 'icon' ? '_hasIcon' : 'hasMainContent'] = hasContent;\n        this.requestUpdate();\n      }\n    }, {\n      kind: \"method\",\n      decorators: [HostListener('click', {\n        capture: true\n      })],\n      key: \"_handleDisabledClick\",\n      value: function _handleDisabledClick(event) {\n        const {\n          disabled\n        } = this;\n        if (disabled) {\n          event.stopPropagation();\n        }\n      }\n    }, {\n      kind: \"field\",\n      decorators: [HostListener('mouseover')],\n      key: \"_handleOver\",\n      value() {\n        return () => {\n          this.openTooltip = true;\n        };\n      }\n    }, {\n      kind: \"field\",\n      decorators: [HostListener('mouseout')],\n      key: \"_handleHoverOut\",\n      value() {\n        return async () => {\n          this.openTooltip = false;\n        };\n      }\n    }, {\n      kind: \"field\",\n      decorators: [HostListener('focus')],\n      key: \"_handleFocus\",\n      value() {\n        return async event => {\n          this.openTooltip = true;\n        };\n      }\n    }, {\n      kind: \"field\",\n      decorators: [HostListener('focusout')],\n      key: \"_handleFocusout\",\n      value() {\n        return async event => {\n          this.openTooltip = false;\n        };\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"autofocus\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true,\n        attribute: 'batch-action'\n      })],\n      key: \"batchAction\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true,\n        attribute: 'button-class-name'\n      })],\n      key: \"buttonClassName\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true,\n        attribute: 'danger-descriptor'\n      })],\n      key: \"dangerDescriptor\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"disabled\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true\n      })],\n      key: \"download\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true,\n        attribute: 'has-main-content',\n        type: Boolean\n      })],\n      key: \"hasMainContent\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true\n      })],\n      key: \"href\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true\n      })],\n      key: \"hreflang\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"isExpressive\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"isSelected\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true\n      })],\n      key: \"kind\",\n      value() {\n        return BUTTON_KIND.PRIMARY;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: 'link-role'\n      })],\n      key: \"linkRole\",\n      value() {\n        return 'button';\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"openTooltip\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true\n      })],\n      key: \"ping\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true\n      })],\n      key: \"rel\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true\n      })],\n      key: \"size\",\n      value() {\n        return 'lg';\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true\n      })],\n      key: \"target\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true,\n        attribute: 'tooltip-alignment'\n      })],\n      key: \"tooltipAlignment\",\n      value() {\n        return BUTTON_TOOLTIP_ALIGNMENT.CENTER;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true,\n        attribute: 'tooltip-position'\n      })],\n      key: \"tooltipPosition\",\n      value() {\n        return BUTTON_TOOLTIP_POSITION.TOP;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true,\n        attribute: 'tooltip-text'\n      })],\n      key: \"tooltipText\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true\n      })],\n      key: \"type\",\n      value() {\n        return BUTTON_TYPE.BUTTON;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value:\n      /**\n       * Handles `keydown` event on this element.\n       */\n      /**\n       * Handles `keydown` event on this element.\n       * Space & enter will toggle state, Escape will only close.\n       */\n      /**\n       * Handles `keydown` event on this element.\n       * Space & enter will toggle state, Escape will only close.\n       */\n      /**\n       * `true` if the button should have input focus when the page loads.\n       */\n      /**\n       * `true` if the button is being used within a data table batch action toolbar\n       */\n      /**\n       * Specify an optional className to be added to your Button\n       */\n      /**\n       * Specify the message read by screen readers for the danger button variant\n       */\n      /**\n       * `true` if the button should be disabled.\n       */\n      /**\n       * The default file name, used if this button is rendered as `<a>`.\n       */\n      /**\n       * `true` if there is a non-icon content.\n       */\n      /**\n       * Link `href`. If present, this button is rendered as `<a>`.\n       */\n      /**\n       * The language of what `href` points to, if this button is rendered as `<a>`.\n       */\n      /**\n       * `true` if expressive theme enabled.\n       */\n      /**\n       * Specify whether the Button is currently selected.\n       * Only applies to the Ghost variant.\n       */\n      /**\n       * Button kind.\n       */\n      /**\n       * The a11y role for `<a>`.\n       */\n      /**\n       * Boolean to determine if tooltip is open.\n       */\n      /**\n       * URLs to ping, if this button is rendered as `<a>`.\n       */\n      /**\n       * The link type, if this button is rendered as `<a>`.\n       */\n      /**\n       * Button size.\n       */\n      /**\n       * The link target, if this button is rendered as `<a>`.\n       */\n      /**\n       * Specify the alignment of the tooltip to the icon-only button.\n       * Can be one of: start, center, or end.\n       */\n      /**\n       * Specify the direction of the tooltip for icon-only buttons.\n       * Can be either top, right, bottom, or left.\n       */\n      /**\n       * Specify the direction of the tooltip for icon-only buttons.\n       * Can be either top, right, bottom, or left.\n       */\n      /**\n       * Button type.\n       */\n      function render() {\n        const {\n          autofocus,\n          buttonClassName,\n          dangerDescriptor,\n          disabled,\n          download,\n          href,\n          hreflang,\n          kind,\n          isExpressive,\n          isSelected,\n          linkRole,\n          openTooltip,\n          ping,\n          rel,\n          size,\n          target,\n          tooltipAlignment,\n          tooltipPosition,\n          tooltipText,\n          type,\n          _hasIcon: hasIcon,\n          hasMainContent,\n          _handleSlotChange: handleSlotChange\n        } = this;\n        let defaultClasses = {\n          [`${prefix}--btn`]: true,\n          [`${prefix}--btn--${kind}`]: kind,\n          [`${prefix}--btn--disabled`]: disabled,\n          [`${prefix}--btn--icon-only`]: hasIcon && !hasMainContent,\n          [`${prefix}--btn--${size}`]: size,\n          [`${prefix}--layout--size-${size}`]: size,\n          [`${prefix}-ce--btn--has-icon`]: hasIcon,\n          [`${prefix}--btn--expressive`]: isExpressive,\n          [`${prefix}--btn--selected`]: isSelected && kind === 'ghost'\n        };\n        if (buttonClassName) {\n          const outputObject = {};\n          buttonClassName === null || buttonClassName === void 0 ? void 0 : buttonClassName.split(' ').forEach(element => {\n            outputObject[element] = true;\n          });\n          defaultClasses = _objectSpread(_objectSpread({}, defaultClasses), outputObject);\n        }\n        const classes = classMap(defaultClasses);\n        const isDanger = kind.includes('danger');\n        if (href) {\n          return disabled ? html(_t || (_t = _`\n            <p id=\"button\" part=\"button\" class=\"${0}\">\n              <slot @slotchange=\"${0}\"></slot>\n              <slot name=\"icon\" @slotchange=\"${0}\"></slot>\n            </p>\n          `), classes, handleSlotChange, handleSlotChange) : html(_t2 || (_t2 = _`\n            <a\n              id=\"button\"\n              part=\"button\"\n              role=\"${0}\"\n              class=\"${0}\"\n              download=\"${0}\"\n              href=\"${0}\"\n              hreflang=\"${0}\"\n              ping=\"${0}\"\n              rel=\"${0}\"\n              target=\"${0}\"\n              type=\"${0}\">\n              <slot @slotchange=\"${0}\"></slot>\n              <slot name=\"icon\" @slotchange=\"${0}\"></slot>\n            </a>\n          `), ifDefined(linkRole), classes, ifDefined(download), ifDefined(href), ifDefined(hreflang), ifDefined(ping), ifDefined(rel), ifDefined(target), ifDefined(type), handleSlotChange, handleSlotChange);\n        }\n        const alignmentClass = tooltipAlignment && (tooltipPosition === BUTTON_TOOLTIP_POSITION.TOP || tooltipPosition === BUTTON_TOOLTIP_POSITION.BOTTOM) ? `-${tooltipAlignment}` : '';\n        const tooltipClasses = classMap({\n          [`${prefix}--popover-container`]: true,\n          [`${prefix}--popover--caret`]: true,\n          [`${prefix}--popover--high-contrast`]: true,\n          [`${prefix}--tooltip`]: true,\n          [`${prefix}--icon-tooltip`]: hasIcon,\n          [`${prefix}--popover--open`]: openTooltip,\n          [`${prefix}--popover--${tooltipPosition}${alignmentClass}`]: tooltipText\n        });\n        return tooltipText && !disabled ? html(_t3 || (_t3 = _`\n          <span class=\"${0}\">\n            <button\n              id=\"button\"\n              part=\"button\"\n              class=\"${0}\"\n              ?autofocus=\"${0}\"\n              ?disabled=\"${0}\"\n              type=\"${0}\"\n              aria-label=\"${0}\">\n              <slot @slotchange=\"${0}\"></slot>\n              <slot name=\"icon\" @slotchange=\"${0}\"></slot>\n            </button>\n            <span class=\"${0}--popover\">\n              <span\n                class=\"${0}--popover-content ${0}--tooltip-content\">\n                ${0}\n              </span>\n              <span class=\"${0}--popover-caret\"></span>\n            </span>\n          </span>\n        `), tooltipClasses, classes, autofocus, disabled, ifDefined(type), ifDefined(tooltipText), handleSlotChange, handleSlotChange, prefix, prefix, prefix, tooltipText, prefix) : html(_t4 || (_t4 = _`\n          <button\n            id=\"button\"\n            part=\"button\"\n            class=\"${0}\"\n            ?autofocus=\"${0}\"\n            ?disabled=\"${0}\"\n            type=\"${0}\">\n            ${0}\n            <slot @slotchange=\"${0}\"></slot>\n            <slot name=\"icon\" @slotchange=\"${0}\"></slot>\n          </button>\n        `), classes, autofocus, disabled, ifDefined(type), isDanger ? html(_t5 || (_t5 = _`<span class=\"${0}--visually-hidden\"\n                  >${0}</span\n                >`), prefix, dangerDescriptor) : ``, handleSlotChange, handleSlotChange);\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"shadowRootOptions\",\n      value() {\n        return _objectSpread(_objectSpread({}, LitElement.shadowRootOptions), {}, {\n          delegatesFocus: true\n        });\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return styles;\n      }\n    }]\n  };\n}, HostListenerMixin(FocusMixin(LitElement)));\nexport default CDSButton;\n//# sourceMappingURL=button.js.map\n","import _decorate from \"@babel/runtime/helpers/esm/decorate\";\nlet _ = t => t,\n  _t,\n  _t2;\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { html } from 'lit';\nimport { prefix } from '../../globals/settings';\nimport CDSButton from './button';\nimport styles from \"././button.css.js\";\nimport { carbonElement as customElement } from '../../globals/decorators/carbon-element';\n\n/**\n * Button skeleton.\n */\nlet CDSButtonSkeleton = _decorate([customElement(`${prefix}-button-skeleton`)], function (_initialize, _CDSButton) {\n  class CDSButtonSkeleton extends _CDSButton {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: CDSButtonSkeleton,\n    d: [{\n      kind: \"method\",\n      key: \"_handleClickLinkSkeleton\",\n      value:\n      /**\n       * Handles `click` event on the `<a>.\n       *\n       * @param event The event.\n       */\n      function _handleClickLinkSkeleton(event) {\n        if (this.disabled) {\n          event.preventDefault(); // Stop following the link\n          event.stopPropagation(); // Stop firing `onClick`\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        const {\n          autofocus,\n          disabled,\n          download,\n          href,\n          hreflang,\n          ping,\n          rel,\n          size,\n          target,\n          type\n        } = this;\n        const classes = classMap({\n          [`${prefix}--btn`]: true,\n          [`${prefix}--skeleton`]: true,\n          [`${prefix}--btn--${size}`]: size\n        });\n        return href ? html(_t || (_t = _`\n          <a\n            id=\"button\"\n            role=\"button\"\n            class=\"${0}\"\n            download=\"${0}\"\n            href=\"${0}\"\n            hreflang=\"${0}\"\n            ping=\"${0}\"\n            rel=\"${0}\"\n            target=\"${0}\"\n            type=\"${0}\"\n            @click=\"${0}\"></a>\n        `), classes, ifDefined(download), ifDefined(href), ifDefined(hreflang), ifDefined(ping), ifDefined(rel), ifDefined(target), ifDefined(type), this._handleClickLinkSkeleton) : html(_t2 || (_t2 = _`\n          <button\n            id=\"button\"\n            class=\"${0}\"\n            ?autofocus=\"${0}\"\n            ?disabled=\"${0}\"\n            type=\"${0}\"></button>\n        `), classes, autofocus, disabled, ifDefined(type));\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return styles;\n      }\n    }]\n  };\n}, CDSButton);\nexport default CDSButtonSkeleton;\n//# sourceMappingURL=button-skeleton.js.map\n"],"names":[],"sourceRoot":""}