{"version":3,"file":"849.0410aa25.iframe.bundle.js","mappings":";;AA4KA;AACA;;;AAGA;ACtDA;;;AAGA;;AAEA;AC+KA;AACA;;;;AC9JA;;AAcA;AACA;AACA;AACA;AACA;AACA;;AAEA","sources":["webpack://storybook-vk/./node_modules/@carbon/web-components/es/components/popover/popover.js","webpack://storybook-vk/./node_modules/@carbon/web-components/es/components/popover/popover-content.js","webpack://storybook-vk/./node_modules/@carbon/web-components/es/components/tooltip/tooltip.js","webpack://storybook-vk/./node_modules/@carbon/web-components/es/components/icon-button/icon-button.js"],"sourcesContent":["import _decorate from \"@babel/runtime/helpers/esm/decorate\";\nlet _ = t => t,\n  _t;\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { classMap } from 'lit/directives/class-map.js';\nimport { LitElement, html } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings';\nimport styles from \"././popover.css.js\";\n/**\n * Popover.\n *\n * @element cds-popover\n */\nlet CDSPopover = _decorate([customElement(`${prefix}-popover`)], function (_initialize, _LitElement) {\n  class CDSPopover extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: CDSPopover,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        reflect: true,\n        type: String\n      })],\n      key: \"align\",\n      value() {\n        return '';\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"caret\",\n      value() {\n        return true;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"dropShadow\",\n      value() {\n        return true;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"highContrast\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"open\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"tabTip\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleSlotChange\",\n      value:\n      /**\n       * Specify direction of alignment\n       */\n\n      /**\n       * Specify whether a caret should be rendered\n       */\n\n      /**\n       * Specify whether a dropShadow should be rendered\n       */\n\n      /**\n       * Render the component using the high-contrast variant\n       */\n\n      /**\n       * Specify whether the component is currently open or closed\n       */\n\n      /**\n       * Render the component using the tab tip variant\n       */\n\n      /**\n       * Handles `slotchange` event.\n       */\n      function _handleSlotChange({\n        target\n      }) {\n        if (this.tabTip) {\n          const component = target.assignedNodes().filter(node => node.nodeType !== Node.TEXT_NODE || node.textContent.trim());\n          component[0].classList.add(`${prefix}--popover--tab-tip__button`);\n        }\n        this.requestUpdate();\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProperties) {\n        const {\n          selectorPopoverContent\n        } = this.constructor;\n        ['open', 'align', 'caret', 'dropShadow', 'tabTip'].forEach(name => {\n          if (changedProperties.has(name)) {\n            const {\n              [name]: value\n            } = this;\n            this.querySelector(selectorPopoverContent)[name] = value;\n          }\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        const {\n          dropShadow,\n          highContrast,\n          open,\n          tabTip,\n          _handleSlotChange: handleSlotChange\n        } = this;\n        if (tabTip) {\n          this.caret = tabTip ? false : true;\n        }\n        this.align = this.align ? this.align : tabTip ? 'bottom-left' : 'bottom';\n        const classes = classMap({\n          [`${prefix}--popover-container`]: true,\n          [`${prefix}--popover--caret`]: this.caret,\n          [`${prefix}--popover--drop-shadow`]: dropShadow,\n          [`${prefix}--popover--high-contrast`]: highContrast,\n          [`${prefix}--popover--open`]: open,\n          [`${prefix}--popover--${this.align}`]: true,\n          [`${prefix}--popover--tab-tip`]: tabTip\n        });\n        return html(_t || (_t = _`\n    <span class=\"${0}\">\n      <slot @slotchange=\"${0}\"></slot>\n      <slot name=\"content\"><slot>\n    </span>\n    `), classes, handleSlotChange);\n      }\n\n      /**\n       * A selector that will return the CDSPopoverContent.\n       */\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"selectorPopoverContent\",\n      value: function selectorPopoverContent() {\n        return `${prefix}-popover-content`;\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return styles;\n      }\n    }]\n  };\n}, LitElement);\nexport default CDSPopover;\n//# sourceMappingURL=popover.js.map\n","import _decorate from \"@babel/runtime/helpers/esm/decorate\";\nlet _ = t => t,\n  _t;\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement, html } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings';\nimport styles from \"././popover.css.js\";\n\n/**\n * Popover.\n *\n * @element cds-popover\n */ /**\n     * Popover.\n     *\n     * @element cds-popover\n     */\nlet CDSPopoverContent = _decorate([customElement(`${prefix}-popover-content`)], function (_initialize, _LitElement) {\n  class CDSPopoverContent extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: CDSPopoverContent,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        reflect: true,\n        type: String\n      })],\n      key: \"align\",\n      value() {\n        return '';\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"caret\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"dropShadow\",\n      value() {\n        return true;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"open\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"tabTip\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true\n      })],\n      key: \"slot\",\n      value() {\n        return 'content';\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value:\n      /**\n       * Specify the popover alignment\n       */\n\n      /**\n       * Specify whether a caret should be rendered\n       */\n\n      /**\n       * Specify whether a dropShadow should be rendered\n       */\n\n      /**\n       * Specify whether the component is currently open or closed\n       */\n\n      /**\n       * Render the component using the tab tip variant\n       */\n\n      /**\n       * The shadow slot this popover content should be in.\n       */\n\n      function render() {\n        return html(_t || (_t = _`\n      <span class=\"${0}--popover-content\">\n        <slot> </slot>\n      </span>\n      <span class=\"${0}--popover-caret\"></span>\n    </span>\n    `), prefix, prefix);\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return styles;\n      }\n    }]\n  };\n}, LitElement);\nexport default CDSPopoverContent;\n//# sourceMappingURL=popover-content.js.map\n","import _decorate from \"@babel/runtime/helpers/esm/decorate\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nlet _ = t => t,\n  _t;\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { css } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings';\nimport HostListener from '../../globals/decorators/host-listener';\nimport HostListenerMixin from '../../globals/mixins/host-listener';\nimport CDSPopover from '../popover/popover';\nimport '../popover/popover-content';\nimport _styles from \"././tooltip.css.js\";\nimport { carbonElement as customElement } from '../../globals/decorators/carbon-element';\n\n/**\n * Trigger button of tooltip.\n *\n * @element cds-tooltip\n */\nlet CDSTooltip = _decorate([customElement(`${prefix}-tooltip`)], function (_initialize, _HostListenerMixin) {\n  class CDSTooltip extends _HostListenerMixin {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: CDSTooltip,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        reflect: true,\n        type: String\n      })],\n      key: \"align\",\n      value() {\n        return 'top';\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true,\n        attribute: 'data-table'\n      })],\n      key: \"dataTable\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true,\n        type: Boolean\n      })],\n      key: \"closeOnActivation\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true,\n        type: Boolean\n      })],\n      key: \"defaultOpen\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: 'enter-delay-ms',\n        type: Number\n      })],\n      key: \"enterDelayMs\",\n      value() {\n        return 100;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: 'leave-delay-ms',\n        type: Number\n      })],\n      key: \"leaveDelayMs\",\n      value() {\n        return 300;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true\n      })],\n      key: \"size\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true,\n        attribute: 'toolbar-action',\n        type: Boolean\n      })],\n      key: \"toolbarAction\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_handleHover\",\n      value() {\n        return async () => {\n          setTimeout(async () => {\n            this.open = true;\n            const {\n              open,\n              updateComplete\n            } = this;\n            if (open) {\n              var _this$querySelector;\n              await updateComplete;\n              const {\n                selectorTooltipContent\n              } = this.constructor;\n              (_this$querySelector = this.querySelector(selectorTooltipContent)) === null || _this$querySelector === void 0 ? void 0 : _this$querySelector.focus();\n            }\n          }, this.enterDelayMs);\n        };\n      }\n    }, {\n      kind: \"field\",\n      key: \"_handleHoverOut\",\n      value() {\n        return async () => {\n          setTimeout(async () => {\n            const {\n              open\n            } = this;\n            if (open) {\n              this.open = false;\n            }\n          }, this.leaveDelayMs);\n        };\n      }\n    }, {\n      kind: \"field\",\n      decorators: [HostListener('click')],\n      key: \"_handleClick\",\n      value() {\n        return async () => {\n          if (this.closeOnActivation) {\n            this._handleHoverOut();\n          }\n        };\n      }\n    }, {\n      kind: \"field\",\n      decorators: [HostListener('click')],\n      key: \"_handleKeydown\",\n      value() {\n        return async event => {\n          if (event.key === ' ' || event.key === 'Enter' || event.key === 'Escape') {\n            this._handleHoverOut();\n          }\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleSlotChange\",\n      value:\n      /**\n       * Specify how the trigger should align with the tooltip\n       */\n\n      /**\n       * `true` if this tooltip is in a data table row\n       */\n\n      /**\n       * Specify whether the tooltip should be closed when clicked\n       */\n\n      /**\n       * Specify whether the tooltip should be open when it first renders\n       */\n\n      /**\n       * Specify the duration in milliseconds to delay before displaying the tooltip\n       */\n\n      /**\n       * Specify the duration in milliseconds to delay before hiding the tooltip\n       */\n\n      /**\n       * Specify the size of the tooltip\n       */\n\n      /**\n       * Specify whether the tooltip should be open when it first renders\n       */\n\n      /**\n       * Handles `mouseover` event on this element.\n       */\n\n      /**\n       * Handles `mouseleave` event on this element.\n       */\n\n      /**\n       * Handles `click` event on this element.\n       */\n\n      /**\n       * Handles `keydown` event on this element.\n       */\n\n      /**\n       * Handles `slotchange` event.\n       */\n      function _handleSlotChange({\n        target\n      }) {\n        const component = target.assignedNodes().filter(node => node.nodeType !== Node.TEXT_NODE || node.textContent.trim());\n        if (!component[0]) {\n          return;\n        }\n        component[0].addEventListener('focus', this._handleHover);\n        component[0].addEventListener('focusout', this._handleHoverOut);\n        component[0].addEventListener('mouseover', this._handleHover);\n        component[0].addEventListener('mouseleave', this._handleHoverOut);\n        this.requestUpdate();\n      }\n    }, {\n      kind: \"method\",\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        if (!this.hasAttribute('highContrast')) {\n          this.setAttribute('highContrast', '');\n        }\n        if (!this.shadowRoot) {\n          this.attachShadow({\n            mode: 'open'\n          });\n        }\n        _get(_getPrototypeOf(CDSTooltip.prototype), \"connectedCallback\", this).call(this);\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProperties) {\n        var _this$shadowRoot, _this$shadowRoot$quer;\n        const {\n          selectorTooltipContent\n        } = this.constructor;\n        const toolTipContent = this.querySelector(selectorTooltipContent);\n        if (changedProperties.has('defaultOpen')) {\n          this.open = this.defaultOpen;\n        }\n        if (changedProperties.has('open')) {\n          this.open ? toolTipContent === null || toolTipContent === void 0 ? void 0 : toolTipContent.setAttribute('open', '') : toolTipContent === null || toolTipContent === void 0 ? void 0 : toolTipContent.removeAttribute('open');\n        }\n        ['align', 'caret'].forEach(name => {\n          if (changedProperties.has(name)) {\n            const {\n              [name]: value\n            } = this;\n            toolTipContent[name] = value;\n          }\n        });\n        (_this$shadowRoot = this.shadowRoot) === null || _this$shadowRoot === void 0 ? void 0 : (_this$shadowRoot$quer = _this$shadowRoot.querySelector(`.${prefix}--popover-container`)) === null || _this$shadowRoot$quer === void 0 ? void 0 : _this$shadowRoot$quer.classList.add(`${prefix}--tooltip`);\n      }\n\n      /**\n       * A selector that will return the CDSTooltipContent.\n       */\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"selectorTooltipContent\",\n      value: function selectorTooltipContent() {\n        return `${prefix}-tooltip-content`;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css(_t || (_t = _`\n      ${0}${0}\n    `), _get(_getPrototypeOf(CDSTooltip), \"styles\", this), _styles);\n      } // `styles` here is a `CSSResult` generated by custom WebPack loader\n    }]\n  };\n}, HostListenerMixin(CDSPopover));\nexport default CDSTooltip;\n//# sourceMappingURL=tooltip.js.map\n","import _decorate from \"@babel/runtime/helpers/esm/decorate\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nlet _ = t => t,\n  _t,\n  _t2;\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { html } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings';\nimport '../tooltip/index';\nimport '../button/index';\nimport CDSButton from '../button/button';\nimport { ICON_BUTTON_SIZE, ICON_BUTTON_TOOLTIP_ALIGNMENT } from './defs';\nimport styles from \"././icon-button.css.js\";\nexport { ICON_BUTTON_SIZE, ICON_BUTTON_TOOLTIP_ALIGNMENT };\n\n/**\n * Icon Button\n *\n */\nlet CDSIconButton = _decorate([customElement(`${prefix}-icon-button`)], function (_initialize, _CDSButton) {\n  class CDSIconButton extends _CDSButton {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: CDSIconButton,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        reflect: true,\n        type: String\n      })],\n      key: \"align\",\n      value() {\n        return 'top';\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: 'close-on-activation',\n        reflect: true,\n        type: Boolean\n      })],\n      key: \"closeOnActivation\",\n      value() {\n        return true;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true,\n        type: Boolean\n      })],\n      key: \"defaultOpen\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: 'enter-delay-ms',\n        type: Number\n      })],\n      key: \"enterDelayMs\",\n      value() {\n        return 100;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: 'leave-delay-ms',\n        type: Number\n      })],\n      key: \"leaveDelayMs\",\n      value() {\n        return 300;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true\n      })],\n      key: \"size\",\n      value() {\n        return 'md';\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value:\n      /**\n       * Specify how the trigger should align with the tooltip\n       */\n\n      /**\n       * Determines whether the tooltip should close when inner content is activated (click, Enter or Space)\n       */\n\n      /**\n       * Specify whether the tooltip should be open when it first renders\n       */\n\n      /**\n       * Specify the duration in milliseconds to delay before displaying the tooltip\n       */\n\n      /**\n       * Specify the duration in milliseconds to delay before hiding the tooltip\n       */\n\n      /**\n       * Specify the size of the Button. Defaults to `md`.\n       */\n\n      function updated(changedProperties) {\n        if (changedProperties) {\n          var _this$shadowRoot, _this$shadowRoot$quer, _this$shadowRoot$quer2, _this$shadowRoot$quer3, _this$querySelector, _this$shadowRoot2, _this$shadowRoot2$que, _this$shadowRoot2$que2;\n          (_this$shadowRoot = this.shadowRoot) === null || _this$shadowRoot === void 0 ? void 0 : (_this$shadowRoot$quer = _this$shadowRoot.querySelector(`${prefix}-tooltip`)) === null || _this$shadowRoot$quer === void 0 ? void 0 : (_this$shadowRoot$quer2 = _this$shadowRoot$quer.shadowRoot) === null || _this$shadowRoot$quer2 === void 0 ? void 0 : (_this$shadowRoot$quer3 = _this$shadowRoot$quer2.querySelector(`.${prefix}--tooltip`)) === null || _this$shadowRoot$quer3 === void 0 ? void 0 : _this$shadowRoot$quer3.classList.add(`${prefix}--icon-tooltip`);\n          const tooltipContent = (_this$querySelector = this.querySelector('[slot=tooltip-content]')) === null || _this$querySelector === void 0 ? void 0 : _this$querySelector.textContent;\n          (_this$shadowRoot2 = this.shadowRoot) === null || _this$shadowRoot2 === void 0 ? void 0 : (_this$shadowRoot2$que = _this$shadowRoot2.querySelector(`${prefix}-tooltip`)) === null || _this$shadowRoot2$que === void 0 ? void 0 : (_this$shadowRoot2$que2 = _this$shadowRoot2$que.querySelector(`button`)) === null || _this$shadowRoot2$que2 === void 0 ? void 0 : _this$shadowRoot2$que2.setAttribute('aria-label', String(tooltipContent));\n        }\n      }\n\n      // eslint-disable-next-line class-methods-use-this\n    }, {\n      kind: \"method\",\n      key: \"_renderTooltipContent\",\n      value: function _renderTooltipContent() {\n        return html(_t || (_t = _`\n      <cds-tooltip-content>\n        <slot name=\"tooltip-content\"></slot>\n      </cds-tooltip-content>\n    `));\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        const {\n          align,\n          closeOnActivation,\n          defaultOpen,\n          enterDelayMs,\n          leaveDelayMs\n        } = this;\n        return html(_t2 || (_t2 = _`\n      <cds-tooltip\n        align=${0}\n        ?defaultOpen=${0}\n        close-on-activation=\"${0}\"\n        enter-delay-ms=${0}\n        leave-delay-ms=${0}>\n        ${0} ${0}\n      </cds-tooltip>\n    `), align, defaultOpen, closeOnActivation, enterDelayMs, leaveDelayMs, _get(_getPrototypeOf(CDSIconButton.prototype), \"render\", this).call(this), this._renderTooltipContent());\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return styles;\n      }\n    }]\n  };\n}, CDSButton);\nexport default CDSIconButton;\n//# sourceMappingURL=icon-button.js.map\n"],"names":[],"sourceRoot":""}