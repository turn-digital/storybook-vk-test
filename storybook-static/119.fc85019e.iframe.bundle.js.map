{"version":3,"file":"119.fc85019e.iframe.bundle.js","mappings":";;;AAuIA;;AAEA;;ACnCA;AACA;AACA;AACA;AACA;;;AAGA;ACwXA;;AAEA;;AAEA;;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;ACpfA;AACA;;AAEA","sources":["webpack://storybook-vk/./node_modules/@carbon/web-components/es/components/copy/copy.js","webpack://storybook-vk/./node_modules/@carbon/web-components/es/components/copy-button/copy-button.js","webpack://storybook-vk/./node_modules/@carbon/web-components/es/components/code-snippet/code-snippet.js","webpack://storybook-vk/./node_modules/@carbon/web-components/es/components/code-snippet/code-snippet-skeleton.js"],"sourcesContent":["import _decorate from \"@babel/runtime/helpers/esm/decorate\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nlet _ = t => t,\n  _t,\n  _t2;\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { html } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings';\nimport styles from \"./../copy-button/copy-button.css.js\";\nimport CDSIconButton from '../icon-button/icon-button';\n\n/**\n * Copy.\n *\n * @element cds-copy\n */\nlet CDSCopy = _decorate([customElement(`${prefix}-copy`)], function (_initialize, _CDSIconButton) {\n  class CDSCopy extends _CDSIconButton {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: CDSCopy,\n    d: [{\n      kind: \"field\",\n      key: \"_showFeedback\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_animation\",\n      value() {\n        return '';\n      }\n    }, {\n      kind: \"field\",\n      key: \"_createHandleFeedbackTooltip\",\n      value() {\n        return () => {\n          let timeoutId;\n          return timeout => {\n            var _this$shadowRoot, _this$shadowRoot$quer;\n            const buttonClasses = (_this$shadowRoot = this.shadowRoot) === null || _this$shadowRoot === void 0 ? void 0 : (_this$shadowRoot$quer = _this$shadowRoot.querySelector('button')) === null || _this$shadowRoot$quer === void 0 ? void 0 : _this$shadowRoot$quer.classList;\n            if (timeoutId) {\n              clearTimeout(timeoutId);\n              timeoutId = undefined;\n            }\n            this._showFeedback = true;\n            buttonClasses === null || buttonClasses === void 0 ? void 0 : buttonClasses.add(`${prefix}--copy-btn--animating`);\n            this._animation = 'fade-in';\n            buttonClasses === null || buttonClasses === void 0 ? void 0 : buttonClasses.add(`${prefix}--copy-btn--${this._animation}`);\n            this.requestUpdate();\n            timeoutId = setTimeout(() => {\n              this._showFeedback = false;\n              this._animation = 'fade-out';\n              buttonClasses === null || buttonClasses === void 0 ? void 0 : buttonClasses.remove(`${prefix}--copy-btn--fade-in`);\n              buttonClasses === null || buttonClasses === void 0 ? void 0 : buttonClasses.add(`${prefix}--copy-btn--${this._animation}`);\n              this.requestUpdate();\n            }, timeout);\n          };\n        };\n      }\n    }, {\n      kind: \"field\",\n      key: \"_handleFeedbackTooltip\",\n      value() {\n        return this._createHandleFeedbackTooltip();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleClickButton\",\n      value:\n      /**\n       * `true` to show the feedback tooltip.\n       */\n\n      /**\n       * `true` to show the feedback tooltip.\n       */\n\n      /**\n       * Handles showing/hiding the feedback tooltip.\n       */\n\n      /**\n       * Handles `click` event on the copy button.\n       */\n      function _handleClickButton() {\n        this._handleFeedbackTooltip(this.feedbackTimeout);\n      }\n\n      /**\n       * Specify the string that is displayed when the button is clicked and the content is copi\n       */\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"feedback\",\n      value() {\n        return 'Copied!';\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Number,\n        attribute: 'feedback-timeout'\n      })],\n      key: \"feedbackTimeout\",\n      value() {\n        return 2000;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_renderTooltipContent\",\n      value:\n      /**\n       * The number in milliseconds to determine how long the tooltip should remain.\n       */\n      // eslint-disable-next-line class-methods-use-this\n      function _renderTooltipContent() {\n        return html(_t || (_t = _`\n      <cds-tooltip-content>\n        ${0}\n      </cds-tooltip-content>\n    `), this._showFeedback ? this.feedback : html(_t2 || (_t2 = _`<slot name=\"tooltip-content\"></slot>`)));\n      }\n    }, {\n      kind: \"method\",\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        this.closeOnActivation = false;\n        this.align = 'bottom';\n        this.addEventListener('click', this._handleClickButton);\n        _get(_getPrototypeOf(CDSCopy.prototype), \"connectedCallback\", this).call(this);\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProperties) {\n        var _this$shadowRoot2, _this$shadowRoot2$que, _this$shadowRoot4, _this$shadowRoot4$que, _this$parentNode;\n        (_this$shadowRoot2 = this.shadowRoot) === null || _this$shadowRoot2 === void 0 ? void 0 : (_this$shadowRoot2$que = _this$shadowRoot2.querySelector('button')) === null || _this$shadowRoot2$que === void 0 ? void 0 : _this$shadowRoot2$que.addEventListener('animationend', () => {\n          if (this._animation === 'fade-out') {\n            var _this$shadowRoot3, _this$shadowRoot3$que;\n            const buttonClasses = (_this$shadowRoot3 = this.shadowRoot) === null || _this$shadowRoot3 === void 0 ? void 0 : (_this$shadowRoot3$que = _this$shadowRoot3.querySelector('button')) === null || _this$shadowRoot3$que === void 0 ? void 0 : _this$shadowRoot3$que.classList;\n            buttonClasses === null || buttonClasses === void 0 ? void 0 : buttonClasses.remove(`${prefix}--copy-btn--animating`);\n            buttonClasses === null || buttonClasses === void 0 ? void 0 : buttonClasses.remove(`${prefix}--copy-btn--${this._animation}`);\n            this._animation = '';\n          }\n        });\n        _get(_getPrototypeOf(CDSCopy.prototype), \"updated\", this).call(this, changedProperties);\n        (_this$shadowRoot4 = this.shadowRoot) === null || _this$shadowRoot4 === void 0 ? void 0 : (_this$shadowRoot4$que = _this$shadowRoot4.querySelector('button') // @ts-ignore: TS thinks `host` doesn't exist on `parentNode`\n        ) === null || _this$shadowRoot4$que === void 0 ? void 0 : _this$shadowRoot4$que.setAttribute('aria-label', (_this$parentNode = this.parentNode) === null || _this$parentNode === void 0 ? void 0 : _this$parentNode.host.textContent);\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return styles;\n      }\n    }]\n  };\n}, CDSIconButton);\nexport default CDSCopy;\n//# sourceMappingURL=copy.js.map\n","import _decorate from \"@babel/runtime/helpers/esm/decorate\";\nlet _ = t => t,\n  _t;\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement, html } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\nimport Copy16 from \"../../icons/copy/16\";\nimport { prefix } from '../../globals/settings';\nimport FocusMixin from '../../globals/mixins/focus';\nimport styles from \"././copy-button.css.js\";\nimport '../copy/copy';\n\n/**\n * Copy button.\n *\n * @element cds-copy-button\n */\nlet CDSCopyButton = _decorate([customElement(`${prefix}-copy-button`)], function (_initialize, _FocusMixin) {\n  class CDSCopyButton extends _FocusMixin {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: CDSCopyButton,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        reflect: true,\n        attribute: 'button-class-name'\n      })],\n      key: \"buttonClassName\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"disabled\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"feedback\",\n      value() {\n        return 'Copied!';\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Number,\n        attribute: 'feedback-timeout'\n      })],\n      key: \"feedbackTimeout\",\n      value() {\n        return 2000;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value:\n      /**\n       * Specify an optional className to be added to your Button\n       */\n\n      /**\n       * `true` if the button should be disabled.\n       */\n\n      /**\n       * Specify the string that is displayed when the button is clicked and the content is copi\n       */\n\n      /**\n       * The number in milliseconds to determine how long the tooltip should remain.\n       */\n\n      function render() {\n        const {\n          buttonClassName,\n          disabled,\n          feedback,\n          feedbackTimeout\n        } = this;\n        let classes = `${prefix}--copy-btn`;\n        if (buttonClassName) {\n          classes += ` ${buttonClassName}`;\n        }\n        return html(_t || (_t = _`\n      <cds-copy\n        ?disabled=${0}\n        feedback=${0}\n        feedback-timeout=${0}\n        button-class-name=${0}>\n        ${0}\n        <slot slot=\"tooltip-content\"></slot>\n      </cds-copy>\n    `), disabled, feedback, feedbackTimeout, classes, Copy16({\n          slot: 'icon',\n          class: `${prefix}--snippet__icon`\n        }));\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return styles;\n      }\n    }]\n  };\n}, FocusMixin(LitElement));\nexport default CDSCopyButton;\n//# sourceMappingURL=copy-button.js.map\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _decorate from \"@babel/runtime/helpers/esm/decorate\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nlet _ = t => t,\n  _t,\n  _t2,\n  _t3,\n  _t4,\n  _t5,\n  _t6;\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { styleMap } from 'lit/directives/style-map.js';\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport ChevronDown16 from \"../../icons/chevron--down/16\";\nimport { prefix } from '../../globals/settings';\nimport FocusMixin from '../../globals/mixins/focus';\nimport { CODE_SNIPPET_COLOR_SCHEME, CODE_SNIPPET_TYPE } from './defs';\nimport styles from \"././code-snippet.css.js\";\nimport '../copy-button/index';\nimport '../copy/copy';\nimport '../button/button';\nimport { carbonElement as customElement } from '../../globals/decorators/carbon-element';\nexport { CODE_SNIPPET_COLOR_SCHEME, CODE_SNIPPET_TYPE };\n\n/**\n * Observes resize of the given element with the given resize observer.\n *\n * @param observer The resize observer.\n * @param elem The element to observe the resize.\n */\nconst observeResize = (observer, elem) => {\n  if (!elem) {\n    return null;\n  }\n  observer.observe(elem);\n  return {\n    release() {\n      observer.unobserve(elem);\n      return null;\n    }\n  };\n};\n\n/**\n * Basic code snippet.\n *\n * @element cds-code-snippet\n */\nlet CDSCodeSnippet = _decorate([customElement(`${prefix}-code-snippet`)], function (_initialize, _FocusMixin) {\n  class CDSCodeSnippet extends _FocusMixin {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: CDSCodeSnippet,\n    d: [{\n      kind: \"field\",\n      key: \"_expandedCode\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_hObserveResize\",\n      value() {\n        return null;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_rowHeightInPixels\",\n      value() {\n        return 16;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_hasRightOverflow\",\n      value() {\n        return true;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_hasLeftOverflow\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_shouldShowMoreLessBtn\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleCopyClick\",\n      value:\n      /**\n       * `true` to expand multi-line variant of code snippet.\n       */\n\n      /**\n       * The handle for observing resize of the parent element of this element.\n       */\n\n      /**\n       * Row height in pixels\n       */\n\n      /**\n       * `true` if code-snippet has right overflow\n       */\n\n      /**\n       * `true` if code-snippet has left overflow\n       */\n\n      /**\n       * `true` if show more or show less btn is visible\n       */\n\n      /**\n       * Handles `click` event on the copy button.\n       */\n      function _handleCopyClick() {\n        const {\n          ownerDocument: doc\n        } = this;\n        const selection = doc.defaultView.getSelection();\n        selection.removeAllRanges();\n        const code = doc.createElement('code');\n        code.className = `${prefix}--visually-hidden`;\n        const pre = doc.createElement('pre');\n        const text = Array.from(this.childNodes).filter(node => node.nodeType === Node.TEXT_NODE);\n        pre.textContent = this.copyText || text[0].textContent;\n        code.appendChild(pre);\n        // Using `<code>` in shadow DOM seems to lose the LFs in some browsers\n        doc.body.appendChild(code);\n        const range = doc.createRange();\n        range.selectNodeContents(code);\n        selection.addRange(range);\n        doc.execCommand('copy');\n        doc.body.removeChild(code);\n        selection.removeAllRanges();\n      }\n\n      // eslint-disable-next-line class-methods-use-this\n    }, {\n      kind: \"method\",\n      key: \"_getCodeRefDimensions\",\n      value: function _getCodeRefDimensions(ref) {\n        const {\n          clientWidth: codeClientWidth,\n          scrollLeft: codeScrollLeft,\n          scrollWidth: codeScrollWidth\n        } = ref;\n        return {\n          horizontalOverflow: codeScrollWidth > codeClientWidth,\n          codeClientWidth,\n          codeScrollWidth,\n          codeScrollLeft\n        };\n      }\n      /**\n       * Handles `scroll` event.\n       */\n    }, {\n      kind: \"method\",\n      key: \"_handleScroll\",\n      value: function _handleScroll() {\n        if (this) {\n          var _this$shadowRoot;\n          const codeContainerRef = this === null || this === void 0 ? void 0 : (_this$shadowRoot = this.shadowRoot) === null || _this$shadowRoot === void 0 ? void 0 : _this$shadowRoot.querySelector(`.${prefix}--snippet-container`);\n          const codeContentRef = codeContainerRef === null || codeContainerRef === void 0 ? void 0 : codeContainerRef.querySelector('pre');\n          if (this.type === CODE_SNIPPET_TYPE.INLINE || this.type === CODE_SNIPPET_TYPE.SINGLE && !codeContainerRef || this.type === CODE_SNIPPET_TYPE.MULTI && !codeContentRef) {\n            return;\n          }\n          const {\n            horizontalOverflow,\n            codeClientWidth,\n            codeScrollWidth,\n            codeScrollLeft\n          } = this.type === CODE_SNIPPET_TYPE.SINGLE ? this._getCodeRefDimensions(codeContainerRef) : this._getCodeRefDimensions(codeContentRef);\n          this._hasLeftOverflow = horizontalOverflow && !!codeScrollLeft;\n          this._hasRightOverflow = horizontalOverflow && codeScrollLeft + codeClientWidth !== codeScrollWidth;\n          this.requestUpdate();\n        }\n      }\n\n      /**\n       * Handles `click` event on the show more or show less button.\n       */\n    }, {\n      kind: \"method\",\n      key: \"_handleClickExpanded\",\n      value: function _handleClickExpanded() {\n        this._expandedCode = !this._expandedCode;\n        this.requestUpdate();\n      }\n\n      /**\n       * The `ResizeObserver` instance for observing element resizes for re-positioning floating menu position.\n       */\n      // TODO: Wait for `.d.ts` update to support `ResizeObserver`\n      // @ts-ignore\n    }, {\n      kind: \"field\",\n      key: \"_resizeObserver\",\n      value() {\n        return new ResizeObserver(() => {\n          var _this$shadowRoot2;\n          const codeContainerRef = (_this$shadowRoot2 = this.shadowRoot) === null || _this$shadowRoot2 === void 0 ? void 0 : _this$shadowRoot2.querySelector(`.${prefix}--snippet-container`);\n          const codeContentRef = codeContainerRef === null || codeContainerRef === void 0 ? void 0 : codeContainerRef.querySelector('code'); // PRE?\n          const {\n            type,\n            maxCollapsedNumberOfRows,\n            maxExpandedNumberOfRows,\n            minExpandedNumberOfRows,\n            _rowHeightInPixels: rowHeightInPixels,\n            _handleScroll: handleScroll\n          } = this;\n          if (codeContentRef && type === CODE_SNIPPET_TYPE.MULTI) {\n            const {\n              height\n            } = codeContentRef.getBoundingClientRect();\n            if (maxCollapsedNumberOfRows > 0 && (maxExpandedNumberOfRows <= 0 || maxExpandedNumberOfRows > maxCollapsedNumberOfRows) && height > maxCollapsedNumberOfRows * rowHeightInPixels) {\n              this._shouldShowMoreLessBtn = true;\n            } else {\n              this._shouldShowMoreLessBtn = false;\n            }\n            if (this._expandedCode && minExpandedNumberOfRows > 0 && height <= minExpandedNumberOfRows * rowHeightInPixels) {\n              this._expandedCode = false;\n            }\n          }\n          if (codeContentRef && type === CODE_SNIPPET_TYPE.MULTI || codeContainerRef && type === CODE_SNIPPET_TYPE.SINGLE) {\n            handleScroll();\n          }\n          this.requestUpdate();\n        });\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: 'copy-text'\n      })],\n      key: \"copyText\",\n      value() {\n        return '';\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"disabled\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"feedback\",\n      value() {\n        return 'Copied!';\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Number,\n        attribute: 'feedback-timeout'\n      })],\n      key: \"feedbackTimeout\",\n      value() {\n        return 2000;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true,\n        attribute: 'hide-copy-button'\n      })],\n      key: \"hideCopyButton\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"maxCollapsedNumberOfRows\",\n      value() {\n        return 15;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"maxExpandedNumberOfRows\",\n      value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"minCollapsedNumberOfRows\",\n      value() {\n        return 3;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"minExpandedNumberOfRows\",\n      value() {\n        return 16;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: 'show-less-text'\n      })],\n      key: \"showLessText\",\n      value() {\n        return 'Show less';\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: 'show-more-text'\n      })],\n      key: \"showMoreText\",\n      value() {\n        return 'Show more';\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: 'tooltip-content'\n      })],\n      key: \"tooltipContent\",\n      value() {\n        return 'Copy to clipboard';\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true,\n        attribute: 'wrap-text'\n      })],\n      key: \"wrapText\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true\n      })],\n      key: \"type\",\n      value() {\n        return CODE_SNIPPET_TYPE.SINGLE;\n      }\n    }, {\n      kind: \"method\",\n      key: \"connectedCallback\",\n      value:\n      /**\n       * Optional text to copy. If not specified, the `children` node's `innerText`\n       * will be used as the copy value.\n       */\n      /**\n       * `true` if the button should be disabled.\n       */\n      /**\n       * Specify the string displayed when the snippet is copied\n       */\n      /**\n       * Specify the time it takes for the feedback message to timeout\n       */\n      /**\n       * Specify whether or not a copy button should be used/rendered.\n       */\n      /**\n       * Specify the maximum number of rows to be shown when in collapsed view\n       */\n      /**\n       * Specify the maximum number of rows to be shown when in expanded view\n       */\n      /**\n       * Specify the minimum number of rows to be shown when in collapsed view\n       */\n      /**\n       * Specify the minimum number of rows to be shown when in expanded view\n       */\n      /**\n       * Specify a string that is displayed when the Code Snippet has been\n       * interacted with to show less lines\n       */\n      /**\n       * Specify a string that is displayed when the Code Snippet text is more\n       * than 15 lines\n       */\n      /**\n       * Tooltip content for the copy button.\n       */\n      /**\n       * `true` if the button should be disabled.\n       */\n      /**\n       * The type of code snippet.\n       */\n      function connectedCallback() {\n        _get(_getPrototypeOf(CDSCodeSnippet.prototype), \"connectedCallback\", this).call(this);\n        if (this._hObserveResize) {\n          this._hObserveResize = this._hObserveResize.release();\n        }\n        this._hObserveResize = observeResize(this._resizeObserver, this);\n      }\n    }, {\n      kind: \"method\",\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        if (this._hObserveResize) {\n          this._hObserveResize = this._hObserveResize.release();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated() {\n        if (this._expandedCode) {\n          this.setAttribute('expanded-code', '');\n        } else {\n          this.removeAttribute('expanded-code');\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        const {\n          disabled,\n          feedback,\n          feedbackTimeout,\n          hideCopyButton,\n          maxExpandedNumberOfRows,\n          minExpandedNumberOfRows,\n          maxCollapsedNumberOfRows,\n          minCollapsedNumberOfRows,\n          type,\n          wrapText,\n          tooltipContent,\n          showMoreText,\n          showLessText,\n          _expandedCode: expandedCode,\n          _handleCopyClick: handleCopyClick,\n          _handleScroll: handleScroll,\n          _hasRightOverflow: hasRightOverflow,\n          _hasLeftOverflow: hasLeftOverflow,\n          _rowHeightInPixels: rowHeightInPixels,\n          _shouldShowMoreLessBtn: shouldShowMoreLessBtn\n        } = this;\n        let classes = `${prefix}--snippet`;\n        type ? classes += ` ${prefix}--snippet--${type}` : '';\n        type !== 'inline' && disabled ? classes += ` ${prefix}--snippet--disabled` : '';\n        hideCopyButton ? classes += ` ${prefix}--snippet--no-copy` : '';\n        wrapText ? classes += ` ${prefix}--snippet--wraptext` : '';\n        type == 'multi' && hasRightOverflow ? classes += ` ${prefix}--snippet--has-right-overflow` : '';\n        const expandButtonClass = `${prefix}--snippet-btn--expand`;\n        const disabledCopyButtonClasses = disabled ? `${prefix}--snippet--disabled` : '';\n        const expandCodeBtnText = expandedCode ? showLessText : showMoreText;\n        if (type === CODE_SNIPPET_TYPE.INLINE) {\n          // Ensures no extra whitespace text node\n          // prettier-ignore\n          return html(_t || (_t = _`\n        <cds-copy button-class-name=\"${0}\" @click=\"${0}\">\n          <code slot=\"icon\"><slot></slot></code>\n          <span slot=\"tooltip-content\">${0}</span>\n        </cds-copy>\n      `), classes, handleCopyClick, tooltipContent);\n        }\n        const styles = {};\n        if (type === 'multi') {\n          if (expandedCode) {\n            if (maxExpandedNumberOfRows > 0) {\n              styles['max-height'] = maxExpandedNumberOfRows * rowHeightInPixels + 'px';\n            }\n            if (minExpandedNumberOfRows > 0) {\n              styles['min-height'] = minExpandedNumberOfRows * rowHeightInPixels + 'px';\n            }\n          } else {\n            if (maxCollapsedNumberOfRows > 0) {\n              styles['max-height'] = maxCollapsedNumberOfRows * rowHeightInPixels + 'px';\n            }\n            if (minCollapsedNumberOfRows > 0) {\n              styles['min-height'] = minCollapsedNumberOfRows * rowHeightInPixels + 'px';\n            }\n          }\n        }\n        return html(_t2 || (_t2 = _`\n      <div\n        role=\"${0}\"\n        tabindex=\"${0}\"\n        class=\"${0}--snippet-container\"\n        aria-label=\"${0}\"\n        aria-readonly=\"${0}\"\n        aria-multiline=\"${0}\"\n        @scroll=\"${0}\"\n        style=${0}>\n        <pre\n          @scroll=\"${0}\"><code><slot></slot></code></pre>\n      </div>\n\n      ${0}\n      ${0}\n      ${0}\n      ${0}\n    `), type === CODE_SNIPPET_TYPE.SINGLE || type === CODE_SNIPPET_TYPE.MULTI ? 'textbox' : null, (type === CODE_SNIPPET_TYPE.SINGLE || type === CODE_SNIPPET_TYPE.MULTI) && !disabled ? 0 : null, prefix, 'code-snippet', type === CODE_SNIPPET_TYPE.SINGLE || type === CODE_SNIPPET_TYPE.MULTI ? true : null, type === CODE_SNIPPET_TYPE.MULTI ? true : null, type === CODE_SNIPPET_TYPE.SINGLE && handleScroll || null, styleMap(styles), type === CODE_SNIPPET_TYPE.MULTI && handleScroll || null, hasLeftOverflow ? html(_t3 || (_t3 = _`\n            <div class=\"${0}--snippet__overflow-indicator--left\"></div>\n          `), prefix) : ``, hasRightOverflow && type !== CODE_SNIPPET_TYPE.MULTI ? html(_t4 || (_t4 = _`\n            <div class=\"${0}--snippet__overflow-indicator--right\"></div>\n          `), prefix) : ``, hideCopyButton ? `` : html(_t5 || (_t5 = _`\n            <cds-copy-button\n              ?disabled=${0}\n              button-class-name=${0}\n              feedback=${0}\n              feedback-timeout=${0}\n              @click=\"${0}\">\n              ${0}\n            </cds-copy-button>\n          `), disabled, disabledCopyButtonClasses, feedback, feedbackTimeout, handleCopyClick, tooltipContent), shouldShowMoreLessBtn ? html(_t6 || (_t6 = _`\n            <cds-button\n              kind=\"ghost\"\n              size=\"sm\"\n              button-class-name=${0}\n              ?disabled=${0}\n              @click=${0}>\n              <span class=\"${0}--snippet-btn--text\">\n                ${0}\n              </span>\n              ${0}\n            </cds-button>\n          `), expandButtonClass, disabled, () => this._handleClickExpanded(), prefix, expandCodeBtnText, ChevronDown16({\n          class: `${prefix}--icon-chevron--down ${prefix}--snippet__icon`,\n          name: 'cheveron--down',\n          role: 'img',\n          slot: 'icon'\n        })) : ``);\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"shadowRootOptions\",\n      value() {\n        return _objectSpread(_objectSpread({}, LitElement.shadowRootOptions), {}, {\n          delegatesFocus: true\n        });\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return styles;\n      }\n    }]\n  };\n}, FocusMixin(LitElement));\nexport default CDSCodeSnippet;\n//# sourceMappingURL=code-snippet.js.map\n","import _decorate from \"@babel/runtime/helpers/esm/decorate\";\nlet _ = t => t,\n  _t,\n  _t2,\n  _t3;\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings';\nimport { CODE_SNIPPET_TYPE } from './code-snippet';\nimport styles from \"././code-snippet.css.js\";\nimport { carbonElement as customElement } from '../../globals/decorators/carbon-element';\n\n/**\n * Skeleton of code snippet.\n */\nlet CDSCodeSnippetSkeleton = _decorate([customElement(`${prefix}-code-snippet-skeleton`)], function (_initialize, _LitElement) {\n  class CDSCodeSnippetSkeleton extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: CDSCodeSnippetSkeleton,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        reflect: true\n      })],\n      key: \"type\",\n      value() {\n        return CODE_SNIPPET_TYPE.SINGLE;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value:\n      /**\n       * The type of code snippet. Corresponds to the attribute with the same name.\n       */\n\n      function render() {\n        return html(_t || (_t = _`\n      <div class=\"${0}--snippet-container\">\n        ${0}\n      </div>\n    `), prefix, this.type !== CODE_SNIPPET_TYPE.MULTI ? html(_t2 || (_t2 = _` <span></span> `)) : html(_t3 || (_t3 = _` <span></span><span></span><span></span> `)));\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return styles;\n      }\n    }]\n  };\n}, LitElement);\nexport default CDSCodeSnippetSkeleton;\n//# sourceMappingURL=code-snippet-skeleton.js.map\n"],"names":[],"sourceRoot":""}