{"version":3,"file":"978.c14d5821.iframe.bundle.js","mappings":";;;AAiPA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AC3NA;AACA;;AAEA;;AAEA;ACiFA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;AAMA;;AAKA;AACA","sources":["webpack://storybook-vk/./node_modules/@carbon/web-components/es/components/accordion/accordion-item.js","webpack://storybook-vk/./node_modules/@carbon/web-components/es/components/accordion/accordion-item-skeleton.js","webpack://storybook-vk/./node_modules/@carbon/web-components/es/components/accordion/accordion-skeleton.js"],"sourcesContent":["import _decorate from \"@babel/runtime/helpers/esm/decorate\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nlet _ = t => t,\n  _t;\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { classMap } from 'lit/directives/class-map.js';\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport ChevronRight16 from \"../../icons/chevron--right/16\";\nimport { prefix } from '../../globals/settings';\nimport FocusMixin from '../../globals/mixins/focus';\nimport { ACCORDION_ITEM_BREAKPOINT } from './defs';\nimport styles from \"././accordion.css.js\";\nimport { carbonElement as customElement } from '../../globals/decorators/carbon-element';\nexport { ACCORDION_ITEM_BREAKPOINT };\n\n/**\n * Observes resize of the given element with the given resize observer.\n *\n * @param observer The resize observer.\n * @param elem The element to observe the resize.\n */\nconst observeResize = (observer, elem) => {\n  if (!elem) {\n    return null;\n  }\n  observer.observe(elem);\n  return {\n    release() {\n      observer.unobserve(elem);\n      return null;\n    }\n  };\n};\n\n/**\n * Accordion item.\n *\n * @element cds-accordion-item\n * @fires cds-accordion-item-beingtoggled\n *   The custom event fired before this accordion item is being toggled upon a user gesture.\n *   Cancellation of this event stops the user-initiated action of toggling this accordion item.\n * @fires cds-accordion-item-toggled - The custom event fired after this accordion item is toggled upon a user gesture.\n * @csspart expando The expando button.\n * @csspart expando-icon The expando icon.\n * @csspart title The title.\n * @csspart content The content.\n */\nlet CDSAccordionItem = _decorate([customElement(`${prefix}-accordion-item`)], function (_initialize, _FocusMixin) {\n  class CDSAccordionItem extends _FocusMixin {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: CDSAccordionItem,\n    d: [{\n      kind: \"field\",\n      key: \"_hObserveResize\",\n      value() {\n        return null;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleUserInitiatedToggle\",\n      value:\n      /**\n       * The current breakpoint.\n       */\n\n      /**\n       * The handle for observing resize of the parent element of this element.\n       */\n\n      /**\n       * Handles user-initiated toggle request of this accordion item.\n       *\n       * @param open The new open state.\n       */\n      function _handleUserInitiatedToggle(open = !this.open) {\n        const init = {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: {\n            open\n          }\n        };\n        if (this.dispatchEvent(new CustomEvent(this.constructor.eventBeforeToggle, init))) {\n          const {\n            selectorAccordionContent\n          } = this.constructor;\n          !this.open ? this.setAttribute('expanding', '') : this.setAttribute('collapsing', '');\n          this.shadowRoot.querySelector(selectorAccordionContent).addEventListener('animationend', () => {\n            this.removeAttribute('expanding');\n            this.removeAttribute('collapsing');\n          });\n          this.open = open;\n          this.dispatchEvent(new CustomEvent(this.constructor.eventToggle, init));\n        }\n      }\n\n      /**\n       * Handler for the `click` event on the expando button.\n       */\n    }, {\n      kind: \"method\",\n      key: \"_handleClickExpando\",\n      value: function _handleClickExpando() {\n        this._handleUserInitiatedToggle();\n      }\n\n      /**\n       * Handler for the `keydown` event on the expando button.\n       */\n    }, {\n      kind: \"field\",\n      key: \"_handleKeydownExpando\",\n      value() {\n        return ({\n          key\n        }) => {\n          if (this.open && (key === 'Esc' || key === 'Escape')) {\n            this._handleUserInitiatedToggle(false);\n          }\n        };\n      }\n    }, {\n      kind: \"field\",\n      key: \"_resizeObserver\",\n      value() {\n        return new ResizeObserver(records => {\n          const {\n            width\n          } = records[records.length - 1].contentRect;\n          const {\n            _sizesBreakpoints: sizesBreakpoints\n          } = this.constructor;\n          this._currentBreakpoint = Object.keys(sizesBreakpoints).sort((lhs, rhs) => sizesBreakpoints[rhs] - sizesBreakpoints[lhs]).find(size => width >= sizesBreakpoints[size]);\n          this.requestUpdate();\n        });\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"disabled\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"open\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: 'title'\n      })],\n      key: \"title\",\n      value() {\n        return '';\n      }\n    }, {\n      kind: \"method\",\n      key: \"connectedCallback\",\n      value:\n      /**\n       * The `ResizeObserver` instance for observing element resizes for re-positioning floating menu position.\n       */\n      // TODO: Wait for `.d.ts` update to support `ResizeObserver`\n      // @ts-ignore\n      /**\n       * `true` if the accordion item should be disabled.\n       */\n      /**\n       * `true` if the accordion item should be open.\n       */\n      /**\n       * The title text.\n       */\n      function connectedCallback() {\n        if (!this.hasAttribute('role')) {\n          this.setAttribute('role', 'listitem');\n        }\n        _get(_getPrototypeOf(CDSAccordionItem.prototype), \"connectedCallback\", this).call(this);\n        if (this._hObserveResize) {\n          this._hObserveResize = this._hObserveResize.release();\n        }\n        this._hObserveResize = observeResize(this._resizeObserver, this);\n      }\n    }, {\n      kind: \"method\",\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        if (this._hObserveResize) {\n          this._hObserveResize = this._hObserveResize.release();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        const {\n          disabled,\n          title,\n          open,\n          _currentBreakpoint: currentBreakpoint,\n          _handleClickExpando: handleClickExpando,\n          _handleKeydownExpando: handleKeydownExpando\n        } = this;\n        const {\n          _classesBreakpoints: classesBreakpoints\n        } = this.constructor;\n        const {\n          [currentBreakpoint]: classBreakpoint\n        } = classesBreakpoints;\n        const contentClasses = classMap({\n          [classBreakpoint]: classBreakpoint,\n          [`${prefix}--accordion__content`]: true\n        });\n        return html(_t || (_t = _`\n      <button\n        ?disabled=\"${0}\"\n        type=\"button\"\n        part=\"expando\"\n        class=\"${0}--accordion__heading\"\n        aria-controls=\"content\"\n        aria-expanded=\"${0}\"\n        @click=\"${0}\"\n        @keydown=\"${0}\">\n        ${0}\n        <div part=\"title\" class=\"${0}--accordion__title\">\n          <slot name=\"title\">${0}</slot>\n        </div>\n      </button>\n      <div id=\"content\" part=\"content\" class=\"${0}\">\n        <slot></slot>\n      </div>\n    `), disabled, prefix, open, handleClickExpando, handleKeydownExpando, ChevronRight16({\n          part: 'expando-icon',\n          class: `${prefix}--accordion__arrow`\n        }), prefix, title, contentClasses);\n      }\n\n      /**\n       * The CSS classes for breakpoints.\n       *\n       * @private\n       */\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"_classesBreakpoints\",\n      value: function _classesBreakpoints() {\n        return {\n          [ACCORDION_ITEM_BREAKPOINT.SMALL]: `${prefix}-ce--accordion__content--${ACCORDION_ITEM_BREAKPOINT.SMALL}`,\n          [ACCORDION_ITEM_BREAKPOINT.MEDIUM]: `${prefix}-ce--accordion__content--${ACCORDION_ITEM_BREAKPOINT.MEDIUM}`\n        };\n      }\n\n      /**\n       * The breakpoints.\n       *\n       * @private\n       */\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"_sizesBreakpoints\",\n      value: function _sizesBreakpoints() {\n        return {\n          [ACCORDION_ITEM_BREAKPOINT.SMALL]: 480,\n          [ACCORDION_ITEM_BREAKPOINT.MEDIUM]: 640\n        };\n      }\n\n      /**\n       * The name of the custom event fired before this accordion item is being toggled upon a user gesture.\n       * Cancellation of this event stops the user-initiated action of toggling this accordion item.\n       */\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"eventBeforeToggle\",\n      value: function eventBeforeToggle() {\n        return `${prefix}-accordion-item-beingtoggled`;\n      }\n\n      /**\n       * The name of the custom event fired after this accordion item is toggled upon a user gesture.\n       */\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"eventToggle\",\n      value: function eventToggle() {\n        return `${prefix}-accordion-item-toggled`;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"selectorAccordionContent\",\n      value: function selectorAccordionContent() {\n        return `.${prefix}--accordion__content`;\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return styles;\n      }\n    }]\n  };\n}, FocusMixin(LitElement));\nexport default CDSAccordionItem;\n//# sourceMappingURL=accordion-item.js.map\n","import _decorate from \"@babel/runtime/helpers/esm/decorate\";\nlet _ = t => t,\n  _t;\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { LitElement, html } from 'lit';\nimport ChevronRight16 from \"../../icons/chevron--right/16\";\nimport { customElement } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings';\nimport '../skeleton-text/index';\nimport styles from \"././accordion.css.js\";\n\n/**\n * Skeleton of accordion item.\n */ /**\n     * Skeleton of accordion item.\n     */\nlet CDSAccordionItemSkeleton = _decorate([customElement(`${prefix}-accordion-item-skeleton`)], function (_initialize, _LitElement) {\n  class CDSAccordionItemSkeleton extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: CDSAccordionItemSkeleton,\n    d: [{\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html(_t || (_t = _`\n      <span class=\"${0}--accordion__heading\">\n        ${0}\n        <cds-skeleton-text\n          class=\"${0}--accordion__title\"></cds-skeleton-text>\n      </span>\n    `), prefix, ChevronRight16({\n          part: 'expando-icon',\n          class: `${prefix}--accordion__arrow`\n        }), prefix);\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return styles;\n      }\n    }]\n  };\n}, LitElement);\nexport default CDSAccordionItemSkeleton;\n//# sourceMappingURL=accordion-item-skeleton.js.map\n","import _decorate from \"@babel/runtime/helpers/esm/decorate\";\nlet _2 = t => t,\n  _t,\n  _t2,\n  _t3;\n/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { classMap } from 'lit/directives/class-map.js';\nimport { LitElement, html } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings';\nimport { ACCORDION_ALIGNMENT } from './accordion';\nimport { forEach } from '../../globals/internal/collection-helpers';\nimport ChevronRight16 from \"../../icons/chevron--right/16\";\nimport './accordion-item-skeleton';\nimport '../skeleton-text/index';\nimport styles from \"././accordion.css.js\";\n\n/**\n * Skeleton of code snippet.\n */ /**\n     * Skeleton of code snippet.\n     */\nlet CDSAccordionSkeleton = _decorate([customElement(`${prefix}-accordion-skeleton`)], function (_initialize, _LitElement) {\n  class CDSAccordionSkeleton extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: CDSAccordionSkeleton,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        reflect: true\n      })],\n      key: \"alignment\",\n      value() {\n        return ACCORDION_ALIGNMENT.END;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Number,\n        attribute: 'count'\n      })],\n      key: \"count\",\n      value() {\n        return 4;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"isFlush\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"open\",\n      value() {\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value:\n      /**\n       * Specify the alignment of the accordion heading title and chevron\n       */\n\n      /**\n       * Set number of items to render\n       */\n\n      /**\n       * Specify whether Accordion text should be flush, default is false, does not work with align=\"start\"\n       */\n\n      /**\n       * `true` if the first accordion item should be open.\n       */\n\n      function updated(changedProperties) {\n        if (changedProperties.has('alignment')) {\n          // Propagate `alignment` attribute to descendants until `:host-context()` gets supported in all major browsers\n          forEach(this.shadowRoot.querySelectorAll(this.constructor.selectorAccordionItemSkeletons), elem => {\n            elem.setAttribute('alignment', this.alignment);\n          });\n        }\n        if (changedProperties.has('isFlush') || changedProperties.has('alignment')) {\n          // Propagate `isFlush` attribute to descendants until `:host-context()` gets supported in all major browsers\n          forEach(this.shadowRoot.querySelectorAll(this.constructor.selectorAccordionItemSkeletons), elem => {\n            this.isFlush && this.alignment !== 'start' ? elem.setAttribute('isFlush', '') : elem.removeAttribute('isFlush');\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        const classes = classMap({\n          [`${prefix}--accordion__item`]: true,\n          [`${prefix}--accordion__item--active`]: true,\n          [`${prefix}--accordion--${this.alignment}`]: this.alignment,\n          [`${prefix}--accordion--flush`]: this.isFlush && this.alignment !== 'start'\n        });\n        const numSkeletonItems = this.open ? this.count - 1 : this.count;\n        return html(_t || (_t = _2`\n      ${0}\n      ${0}\n    `), this.open ? html(_t2 || (_t2 = _2`\n            <li class=\"${0}\">\n              <span class=\"${0}--accordion__heading\">\n                ${0}\n                <cds-skeleton-text\n                  class=\"${0}--accordion__title\"></cds-skeleton-text>\n              </span>\n              <div class=\"${0}--accordion__content\">\n                <cds-skeleton-text width=\"90%\"></cds-skeleton-text>\n                <cds-skeleton-text width=\"80%\"></cds-skeleton-text>\n                <cds-skeleton-text width=\"85%\"></cds-skeleton-text>\n              </div>\n            </li>\n          `), classes, prefix, ChevronRight16({\n          part: 'expando-icon',\n          class: `${prefix}--accordion__arrow`\n        }), prefix, prefix) : ``, Array.from(new Array(numSkeletonItems)).map((_, index) => html(_t3 || (_t3 = _2`\n            <cds-accordion-item-skeleton\n              key=${0}></cds-accordion-item-skeleton>\n          `), index)));\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"selectorAccordionItemSkeletons\",\n      value: function selectorAccordionItemSkeletons() {\n        return `${prefix}-accordion-item-skeleton`;\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return styles;\n      }\n    }]\n  };\n}, LitElement);\nexport default CDSAccordionSkeleton;\n//# sourceMappingURL=accordion-skeleton.js.map\n"],"names":[],"sourceRoot":""}